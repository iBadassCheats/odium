using System;
using System.Collections.Generic;
using Odium.ButtonAPI.QM;
using Odium.Components;
using Odium.Modules;
using Odium.Odium;
using Odium.Patches;
using Odium.Wrappers;
using UnityEngine;
using VampClient.Api;

namespace Odium.QMPages;

internal class Exploits
{
	private static List<string> preGeneratedMessages = new List<string>();

	private static System.Random random = new System.Random();

	private static object chatboxLaggerCoroutine = null;

	private static int currentAnimationIndex = 0;

	private static readonly string[][] allAnimations = new string[7][]
	{
		new string[14]
		{
			"⟦ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⟧\nThis can NOT be real\nRight?", "⟦ o⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⟧\nThis can NOT be real\nRight?", "⟦ od⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⟧\nThis can NOT be real\nRight?", "⟦ odi⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⟧\nThis can NOT be real\nRight?", "⟦ odiu⠀⠀⠀⠀⠀⠀⠀⠀⠀⟧\nThis can NOT be real\nRight?", "⟦ odium⠀⠀⠀⠀⠀⠀⠀⠀⟧\nThis can NOT be real\nRight?", "⟦ odiumv⠀⠀⠀⠀⠀⠀⠀⟧\nThis can NOT be real\nRight?", "⟦ odiumvr⠀⠀⠀⠀⠀⠀⟧\nThis can NOT be real\nRight?", "⟦ odiumvrc⠀⠀⠀⠀⠀⟧\nThis can NOT be real\nRight?", "⟦ odiumvrc.⠀⠀⠀⠀⟧\nThis can NOT be real\nRight?",
			"⟦ odiumvrc.c⠀⠀⠀⟧\nThis can NOT be real\nRight?", "⟦ odiumvrc.co⠀⠀⟧\nThis can NOT be real\nRight?", "⟦ odiumvrc.com⠀⟧\nThis can NOT be real\nRight?", "⟦ odiumvrc.com ⟧\nThis can NOT be real\nRight?"
		},
		new string[17]
		{
			"⟦ ██████████████ ⟧", "⟦ ▓█████████████ ⟧", "⟦ ▒▓████████████ ⟧", "⟦ ░▒▓███████████ ⟧", "⟦ ⠀░▒▓██████████ ⟧", "⟦ ⠀⠀░▒▓█████████ ⟧", "⟦ ⠀⠀⠀░▒▓████████ ⟧", "⟦ ⠀⠀⠀⠀░▒▓███████ ⟧", "⟦ ⠀⠀⠀⠀⠀░▒▓██████ ⟧", "⟦ ⠀⠀⠀⠀⠀⠀░▒▓█████ ⟧",
			"⟦ ⠀⠀⠀⠀⠀⠀⠀░▒▓████ ⟧", "⟦ ⠀⠀⠀⠀⠀⠀⠀⠀░▒▓███ ⟧", "⟦ ⠀⠀⠀⠀⠀⠀⠀⠀⠀░▒▓██ ⟧", "⟦ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀░▒▓█ ⟧", "⟦ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀░▒ ⟧", "⟦ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀░ ⟧", "⟦ odiumvrc.com ⟧"
		},
		new string[8] { "⟦ ø∂!ʉɱvɾȼ.ȼøɱ ⟧", "⟦ 0d1umvrc.c0m ⟧", "⟦ øđɨữmvɾȼ.ȼøm ⟧", "⟦ odiumvrc.com ⟧", "⟦ ÖÐ1ÛMVRç.çÖM ⟧", "⟦ odiumvrc.com ⟧", "⟦ ōđįūmvɾč.čōm ⟧", "⟦ odiumvrc.com ⟧" },
		new string[15]
		{
			"⟦ [             ] 0% ⟧", "⟦ [▓            ] 8% ⟧", "⟦ [▓▓           ] 15% ⟧", "⟦ [▓▓▓          ] 23% ⟧", "⟦ [▓▓▓▓         ] 31% ⟧", "⟦ [▓▓▓▓▓        ] 38% ⟧", "⟦ [▓▓▓▓▓▓       ] 46% ⟧", "⟦ [▓▓▓▓▓▓▓      ] 54% ⟧", "⟦ [▓▓▓▓▓▓▓▓     ] 62% ⟧", "⟦ [▓▓▓▓▓▓▓▓▓    ] 69% ⟧",
			"⟦ [▓▓▓▓▓▓▓▓▓▓   ] 77% ⟧", "⟦ [▓▓▓▓▓▓▓▓▓▓▓  ] 85% ⟧", "⟦ [▓▓▓▓▓▓▓▓▓▓▓▓ ] 92% ⟧", "⟦ [▓▓▓▓▓▓▓▓▓▓▓▓▓] 100% ⟧", "⟦ odiumvrc.com ⟧"
		},
		new string[9] { "⟦ |   LOADING   | ⟧", "⟦ /   LOADING   / ⟧", "⟦ —   LOADING   — ⟧", "⟦ \\   LOADING   \\ ⟧", "⟦ |   LOADING   | ⟧", "⟦ /   LOADING   / ⟧", "⟦ —   LOADING   — ⟧", "⟦ \\   LOADING   \\ ⟧", "⟦ odiumvrc.com ⟧" },
		new string[15]
		{
			"⟦ |⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⟧", "⟦ o|⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⟧", "⟦ od|⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⟧", "⟦ odi|⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⟧", "⟦ odiu|⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⟧", "⟦ odium|⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⟧", "⟦ odiumv|⠀⠀⠀⠀⠀⠀⠀⠀ ⟧", "⟦ odiumvr|⠀⠀⠀⠀⠀⠀⠀ ⟧", "⟦ odiumvrc|⠀⠀⠀⠀⠀⠀ ⟧", "⟦ odiumvrc.|⠀⠀⠀⠀⠀ ⟧",
			"⟦ odiumvrc.c|⠀⠀⠀⠀ ⟧", "⟦ odiumvrc.co|⠀⠀⠀ ⟧", "⟦ odiumvrc.com|⠀⠀ ⟧", "⟦ odiumvrc.com| ⟧", "⟦ odiumvrc.com ⟧"
		},
		new string[9] { "⟦ ⠀⠀⠀⠀⠀⠀•⠀⠀⠀⠀⠀⠀ ⟧", "⟦ ⠀⠀⠀⠀⠀*⚬*⠀⠀⠀⠀⠀ ⟧", "⟦ ⠀⠀⠀⠀*⚬⚹⚬*⠀⠀⠀⠀ ⟧", "⟦ ⠀⠀⠀*⚬⚹❋⚹⚬*⠀⠀⠀ ⟧", "⟦ ⠀⠀*⚬⚹❋❋❋⚹⚬*⠀⠀ ⟧", "⟦ ⠀*⚬⚹❋❋❋❋❋⚹⚬*⠀ ⟧", "⟦ *⚬⚹❋❋❋❋❋❋❋⚹⚬* ⟧", "⟦ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⟧", "⟦ odiumvrc.com ⟧" }
	};

	private static readonly string[] animationNames = new string[7] { "Classic", "Matrix", "Glitch", "Loading", "Spinner", "Typewriter", "Explosion" };

	private static HashSet<char> usedChineseChars = new HashSet<char>();

	private static char[] chineseCharsBuffer = new char[144];

	private static float chatboxLaggerTimer = 0f;

	private static readonly float ChatboxLaggerInterval = 0.12f;

	private static void NextAnimation()
	{
		currentAnimationIndex = (currentAnimationIndex + 1) % allAnimations.Length;
		string text = animationNames[currentAnimationIndex];
		OdiumConsole.Log("Animation", "Switched to: " + text);
		ToastBase.Toast("Odium Animation", "Switched to '" + text + "' animation style", PhotonPatches.LogoIcon, 3f);
	}

	private static void PreviousAnimation()
	{
		currentAnimationIndex = (currentAnimationIndex - 1 + allAnimations.Length) % allAnimations.Length;
		string text = animationNames[currentAnimationIndex];
		OdiumConsole.Log("Animation", "Switched to: " + text);
		ToastBase.Toast("Odium Animation", "Switched to '" + text + "' animation style", PhotonPatches.LogoIcon, 3f);
	}

	private static string[] GetCurrentAnimation()
	{
		return allAnimations[currentAnimationIndex];
	}

	public static string[] GenerateBubblePopAnimation()
	{
		List<string> list = new List<string>();
		string text = "Odium Client";
		string text2 = "[ ";
		string text3 = " ]";
		string item = text2 + new string('○', text.Length) + text3;
		list.Add(item);
		for (int i = 0; i < text.Length; i++)
		{
			char[] array = new char[text.Length];
			for (int j = 0; j < text.Length; j++)
			{
				if (j < i)
				{
					array[j] = text[j];
				}
				else if (j == i)
				{
					array[j] = '◌';
				}
				else
				{
					array[j] = '○';
				}
			}
			string item2 = text2 + new string(array) + text3;
			list.Add(item2);
			array[i] = '★';
			string item3 = text2 + new string(array) + text3;
			list.Add(item3);
			array[i] = text[i];
			string item4 = text2 + new string(array) + text3;
			list.Add(item4);
		}
		string item5 = text2 + text + text3;
		list.Add(item5);
		return list.ToArray();
	}

	public static void InitializePage(QMNestedMenu exploitsButton, Sprite buttonImage)
	{
		Sprite icon = SpriteUtil.LoadFromDisk(Environment.CurrentDirectory + "\\Odium\\Drone.png");
		new QMToggleButton(exploitsButton, 1f, 0f, "Udon Block", delegate
		{
			OdiumConsole.Log("Exploits: ", "Udon Block Enabled");
			PhotonPatches.BlockUdon = true;
		}, delegate
		{
			OdiumConsole.Log("Exploits: ", "Udon Block Disabled");
			PhotonPatches.BlockUdon = false;
		}, "Stops udon from working, remember this will break game worlds", defaultState: false, buttonImage);
		new QMToggleButton(exploitsButton, 2f, 0f, "Ghost Mode", delegate
		{
			OdiumConsole.Log("Exploits: ", "Ghost Mode Enabled");
			GhostMode.ToggleGhost(enable: true);
		}, delegate
		{
			OdiumConsole.Log("Exploits: ", "Ghost Mode Disabled");
			GhostMode.ToggleGhost(enable: false);
		}, "They can't see me like john cena", defaultState: false, buttonImage);
		new QMToggleButton(exploitsButton, 3f, 0f, "Chatbox Lagger", delegate
		{
			OdiumConsole.Log("Exploits: ", "Chatbox Lagger Enabled");
			AssignedVariables.chatboxLagger = true;
		}, delegate
		{
			OdiumConsole.Log("Exploits: ", "Chatbox Lagger Disabled");
			AssignedVariables.chatboxLagger = false;
		}, "Ever wanted to read the bible in chinese?", defaultState: false, buttonImage);
		new QMToggleButton(exploitsButton, 4f, 0f, "Loud Mic", delegate
		{
			LoudMic.Activated(state: true);
		}, delegate
		{
			LoudMic.Activated(state: false);
		}, "Makes your microphone loud as hell", defaultState: false, buttonImage);
		new QMToggleButton(exploitsButton, 1f, 1f, "USpeak Spam", delegate
		{
			USpeakSpam.ToggleUSpeakSpam(state: true);
		}, delegate
		{
			USpeakSpam.ToggleUSpeakSpam(state: false);
		}, "Makes your microphone loud as hell", defaultState: false, buttonImage);
		new QMToggleButton(exploitsButton, 2f, 1f, "Anti Quest", delegate
		{
			if (!PlayerWrapper.LocalPlayer.field_Private_APIUser_0.isSupporter)
			{
				OdiumBottomNotification.ShowNotification("You need <color=Ffd700>VRC+</color> for this!");
			}
			else
			{
				AssignedVariables.autoDroneCrash = true;
				OdiumBottomNotification.ShowNotification("Anti Quest <color=green>enabled</color>");
			}
		}, delegate
		{
			if (!PlayerWrapper.LocalPlayer.field_Private_APIUser_0.isSupporter)
			{
				OdiumBottomNotification.ShowNotification("You need <color=Ffd700>VRC+</color> for this!");
			}
			else
			{
				AssignedVariables.autoDroneCrash = false;
				OdiumBottomNotification.ShowNotification("Anti Quest <color=red>disabled</color>");
			}
		}, "Makes your microphone loud as hell", defaultState: false, buttonImage);
		new QMSingleButton(exploitsButton, 1f, 3f, "Drone Crash", delegate
		{
			DroneWrapper.DroneCrash();
		}, "Gay", halfBtn: false, icon, buttonImage);
		Sprite icon2 = SpriteUtil.LoadFromDisk(Environment.CurrentDirectory + "\\Odium\\Skip.png");
		Sprite icon3 = SpriteUtil.LoadFromDisk(Environment.CurrentDirectory + "\\Odium\\Rewind.png");
		new QMSingleButton(exploitsButton, 2f, 3f, "Prev Anim", delegate
		{
			PreviousAnimation();
		}, "Previous animation style", halfBtn: false, icon3, buttonImage);
		new QMSingleButton(exploitsButton, 4f, 3f, "Next Anim", delegate
		{
			NextAnimation();
		}, "Next animation style", halfBtn: false, icon2, buttonImage);
		new QMToggleButton(exploitsButton, 3f, 3f, "Chatbox Anim", delegate
		{
			Chatbox.SendFrameAnimation(GetCurrentAnimation(), "odium_animation", null, loop: true, 2f);
		}, delegate
		{
			Chatbox.CancelFrameEffect("odium_animation");
		}, "Shows " + animationNames[currentAnimationIndex] + " animation in chat", defaultState: false, buttonImage);
	}

	private static void PreGenerateMessages(int count)
	{
		for (int i = 0; i < count; i++)
		{
			char[] array = new char[144];
			for (int j = 0; j < 144; j++)
			{
				array[j] = (char)random.Next(19968, 40960);
			}
			preGeneratedMessages.Add(new string(array));
		}
	}

	public static void UpdateChatboxLagger()
	{
		if (!AssignedVariables.chatboxLagger)
		{
			return;
		}
		chatboxLaggerTimer += Time.deltaTime;
		if (!(chatboxLaggerTimer >= ChatboxLaggerInterval))
		{
			return;
		}
		chatboxLaggerTimer = 0f;
		for (int i = 0; i < 144; i++)
		{
			int num = 0;
			char c;
			do
			{
				c = (char)random.Next(19968, 40960);
				num++;
				if (num >= 100)
				{
					usedChineseChars.Clear();
					break;
				}
			}
			while (usedChineseChars.Contains(c));
			usedChineseChars.Add(c);
			chineseCharsBuffer[i] = c;
		}
		Chatbox.SendCustomChatMessage(new string(chineseCharsBuffer));
	}
}
